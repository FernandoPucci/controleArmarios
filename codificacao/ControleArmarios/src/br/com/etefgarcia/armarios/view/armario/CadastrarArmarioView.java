/*
 * Copyright (C) 2016 fernando-pucci
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package br.com.etefgarcia.armarios.view.armario;

import br.com.etefgarcia.armarios.action.armario.CadastrarArmarioViewAction;
import br.com.etefgarcia.armarios.controller.ArmarioController;
import br.com.etefgarcia.armarios.model.Armario;
import br.com.etefgarcia.armarios.util.Mensagens;
import br.com.etefgarcia.armarios.util.TelaRenderUtil;
import br.com.etefgarcia.armarios.util.constantes.telas.ConstantesTelas;
import br.com.etefgarcia.armarios.util.constantes.telas.render.ZebraCellRenderer;
import java.util.List;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author fernando-pucci
 *
 */
public class CadastrarArmarioView extends javax.swing.JFrame {

    private ArmarioController armarioController;
    private CadastrarArmarioViewAction cadastrarArmarioViewAction;
    private Boolean isAtualizar = Boolean.FALSE;
    private List<Armario> listaArmarios = null;

    private final Runnable threadChecaCampoChave = new Runnable() {

        @Override
        public void run() {
            validaCampoChave();
            populaDescricao();
        }
    };

    public CadastrarArmarioView(Boolean isAtualizar) {
        initComponents();

        this.isAtualizar = isAtualizar == null ? Boolean.FALSE : isAtualizar;

        inicializar();
        configurarBotoes(false);
        configurarCampos();
        configurarItens();

        mostrarTabela(false);

    }

    public CadastrarArmarioView(Armario armario, Boolean isAtualizar) {

        initComponents();

        this.armario = armario;

        inicializar();
        configurarBotoes(armario != null);
        configurarCampos();
        configurarItens();

        mostrarTabela(false);

        if (armario != null) {
            jCheckBoxFlgAtivo.setEnabled(true);
            vincularArmario();
        }

    }

    private void inicializar() {

        jButtonBuscar.setName(ConstantesTelas.BTN_BUSCAR);
        jButtonCancelar.setName(ConstantesTelas.BTN_CANCELAR);
        jButtonSalvar.setName(ConstantesTelas.BTN_SALVAR);
        jButtonCancelar.setName(ConstantesTelas.BTN_CANCELAR);

        jButtonBuscar.setToolTipText(ConstantesTelas.TT_BTN_BUSCAR);
        jButtonSalvar.setToolTipText(ConstantesTelas.TT_BTN_SALVAR);
        jButtonLimpar.setToolTipText(ConstantesTelas.TT_BTN_LIMPAR);
        jButtonCancelar.setToolTipText(ConstantesTelas.TT_BTN_CANCELAR);

        this.armarioController = new ArmarioController(this);
        this.cadastrarArmarioViewAction = new CadastrarArmarioViewAction(armarioController);

        jTextFieldChave.requestFocus();
        
        removeListeners();
        adicionaListeners();

    }

    private void configurarItens() {

        TelaRenderUtil.habilitarCampos(jTableTabela, false);
        TelaRenderUtil.habilitarCampos(jScrollPane1, false);

    }

    private void configurarCampos() {

        jTextFieldIdArmario.setEnabled(false);
        jTextFieldIdArmario.setEditable(false);

        if (!isAtualizar) {

            jCheckBoxFlgAtivo.setSelected(true);
            TelaRenderUtil.habilitarCampos(jCheckBoxFlgAtivo, false);

        } else {

            jCheckBoxFlgAtivo.setSelected(this.armario.getFlgAtivo());
            TelaRenderUtil.habilitarCampos(jCheckBoxFlgAtivo, true);

        }

    }

    private void configurarBotoes(boolean habilitar) {

        TelaRenderUtil.habilitarBotao(jButtonBuscar, habilitar);
        TelaRenderUtil.habilitarBotao(jButtonSalvar, habilitar);
        TelaRenderUtil.habilitarBotao(jButtonLimpar, habilitar);

    }

    private void habilitarSalvar(boolean habilitar) {

        TelaRenderUtil.habilitarBotao(jButtonSalvar, habilitar);
        TelaRenderUtil.habilitarBotao(jButtonLimpar, habilitar);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        armario = new br.com.etefgarcia.armarios.model.Armario();
        jPanelFundo = new javax.swing.JPanel();
        jPanelEsquerdo = new javax.swing.JPanel();
        jLabelIdArmario = new javax.swing.JLabel();
        jTextFieldIdArmario = new javax.swing.JTextField();
        jLabelChave = new javax.swing.JLabel();
        jTextFieldChave = new javax.swing.JTextField();
        jPanelInternoDadosArmario = new javax.swing.JPanel();
        jLabelDescricao = new javax.swing.JLabel();
        jTextFieldDescricao = new javax.swing.JTextField();
        jCheckBoxFlgOcupado = new javax.swing.JCheckBox();
        jCheckBoxFlgAtivo = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTabela = new javax.swing.JTable();
        jPanelBotoes = new javax.swing.JPanel();
        jButtonBuscar = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(30, 0), new java.awt.Dimension(30, 0), new java.awt.Dimension(30, 32767));
        jButtonSalvar = new javax.swing.JButton();
        jButtonLimpar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(ConstantesTelas.TITULO_JANELA_PRINCIPAL + " - " + ConstantesTelas.TITULO_CADASTRAR_ARMARIO);
        setMinimumSize(new java.awt.Dimension(640, 480));
        setResizable(false);

        jPanelFundo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelFundo.setMaximumSize(new java.awt.Dimension(640, 480));
        jPanelFundo.setMinimumSize(new java.awt.Dimension(640, 480));
        jPanelFundo.setPreferredSize(new java.awt.Dimension(640, 480));
        jPanelFundo.setRequestFocusEnabled(false);
        jPanelFundo.setLayout(new javax.swing.BoxLayout(jPanelFundo, javax.swing.BoxLayout.LINE_AXIS));

        jPanelEsquerdo.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, ConstantesTelas.TITULO_CADASTRAR_ALUNO
            , javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14)), javax.swing.BorderFactory.createEtchedBorder())); // NOI18N
jPanelEsquerdo.setMaximumSize(new java.awt.Dimension(500, 459));
jPanelEsquerdo.setMinimumSize(new java.awt.Dimension(500, 459));
jPanelEsquerdo.setPreferredSize(new java.awt.Dimension(500, 459));

jLabelIdArmario.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
jLabelIdArmario.setText("Cód.:");
jPanelEsquerdo.add(jLabelIdArmario);

jTextFieldIdArmario.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
jTextFieldIdArmario.setHorizontalAlignment(javax.swing.JTextField.CENTER);
jTextFieldIdArmario.setDisabledTextColor(new java.awt.Color(210, 20, 8));
jTextFieldIdArmario.setPreferredSize(new java.awt.Dimension(90, 28));
jPanelEsquerdo.add(jTextFieldIdArmario);

jLabelChave.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
jLabelChave.setText("Chave:");
jPanelEsquerdo.add(jLabelChave);

jTextFieldChave.setMaximumSize(new java.awt.Dimension(280, 28));
jTextFieldChave.setMinimumSize(new java.awt.Dimension(280, 28));
jTextFieldChave.setPreferredSize(new java.awt.Dimension(280, 28));
jTextFieldChave.addFocusListener(new java.awt.event.FocusAdapter() {
    public void focusLost(java.awt.event.FocusEvent evt) {
        jTextFieldChaveFocusLost(evt);
    }
    });
    jTextFieldChave.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            jTextFieldChaveKeyTyped(evt);
        }
    });
    jPanelEsquerdo.add(jTextFieldChave);

    jPanelInternoDadosArmario.setMaximumSize(new java.awt.Dimension(483, 80));
    jPanelInternoDadosArmario.setMinimumSize(new java.awt.Dimension(483, 80));
    jPanelInternoDadosArmario.setPreferredSize(new java.awt.Dimension(483, 80));

    jLabelDescricao.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
    jLabelDescricao.setText("Descrição:");
    jPanelInternoDadosArmario.add(jLabelDescricao);

    jTextFieldDescricao.setMaximumSize(new java.awt.Dimension(390, 28));
    jTextFieldDescricao.setMinimumSize(new java.awt.Dimension(390, 28));
    jTextFieldDescricao.setPreferredSize(new java.awt.Dimension(390, 28));
    jTextFieldDescricao.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            jTextFieldDescricaoFocusLost(evt);
        }
    });
    jTextFieldDescricao.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            jTextFieldDescricaoKeyTyped(evt);
        }
    });
    jPanelInternoDadosArmario.add(jTextFieldDescricao);

    jCheckBoxFlgOcupado.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
    jCheckBoxFlgOcupado.setText("Ocupado ?");
    jCheckBoxFlgOcupado.setMargin(new java.awt.Insets(0, 50, 0, 0));
    jCheckBoxFlgOcupado.setMaximumSize(new java.awt.Dimension(169, 24));
    jCheckBoxFlgOcupado.setMinimumSize(new java.awt.Dimension(169, 24));
    jCheckBoxFlgOcupado.setPreferredSize(new java.awt.Dimension(169, 24));
    jCheckBoxFlgOcupado.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jCheckBoxFlgOcupadoActionPerformed(evt);
        }
    });
    jPanelInternoDadosArmario.add(jCheckBoxFlgOcupado);

    jCheckBoxFlgAtivo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
    jCheckBoxFlgAtivo.setText("Ativo ?");
    jCheckBoxFlgAtivo.setMargin(new java.awt.Insets(0, 50, 0, 0));
    jCheckBoxFlgAtivo.setMaximumSize(new java.awt.Dimension(169, 24));
    jCheckBoxFlgAtivo.setMinimumSize(new java.awt.Dimension(169, 24));
    jCheckBoxFlgAtivo.setPreferredSize(new java.awt.Dimension(169, 24));
    jCheckBoxFlgAtivo.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jCheckBoxFlgAtivoActionPerformed(evt);
        }
    });
    jPanelInternoDadosArmario.add(jCheckBoxFlgAtivo);

    jPanelEsquerdo.add(jPanelInternoDadosArmario);

    jSeparator1.setMaximumSize(new java.awt.Dimension(450, 15));
    jSeparator1.setMinimumSize(new java.awt.Dimension(450, 15));
    jSeparator1.setName(""); // NOI18N
    jSeparator1.setPreferredSize(new java.awt.Dimension(450, 5));
    jSeparator1.setRequestFocusEnabled(false);
    jPanelEsquerdo.add(jSeparator1);

    jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    jScrollPane1.setMaximumSize(new java.awt.Dimension(452, 270));
    jScrollPane1.setMinimumSize(new java.awt.Dimension(452, 270));
    jScrollPane1.setName(""); // NOI18N
    jScrollPane1.setPreferredSize(new java.awt.Dimension(452, 270));
    jScrollPane1.setRequestFocusEnabled(false);

    jTableTabela.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null}
        },
        new String [] {
            "Título 1"
        }
    ) {
        boolean[] canEdit = new boolean [] {
            false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    jTableTabela.setEnabled(false);
    jTableTabela.setMaximumSize(new java.awt.Dimension(400, 270));
    jTableTabela.setMinimumSize(new java.awt.Dimension(400, 270));
    jTableTabela.setName(ConstantesTelas.ITM_TABELA);
    jTableTabela.setPreferredSize(new java.awt.Dimension(400, 270));
    jTableTabela.setSelectionBackground(new java.awt.Color(254, 130, 140));
    jTableTabela.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane1.setViewportView(jTableTabela);

    jPanelEsquerdo.add(jScrollPane1);

    jPanelFundo.add(jPanelEsquerdo);

    jPanelBotoes.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    jPanelBotoes.setMaximumSize(new java.awt.Dimension(120, 459));
    jPanelBotoes.setMinimumSize(new java.awt.Dimension(120, 459));
    jPanelBotoes.setName(""); // NOI18N
    jPanelBotoes.setPreferredSize(new java.awt.Dimension(120, 459));
    jPanelBotoes.setRequestFocusEnabled(false);
    jPanelBotoes.setLayout(new java.awt.GridLayout(5, 1));

    jButtonBuscar.setBackground(new java.awt.Color(242, 241, 240));
    jButtonBuscar.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
    jButtonBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ico/search3.png"))); // NOI18N
    jButtonBuscar.setToolTipText("TESTE SOENTE");
    jPanelBotoes.add(jButtonBuscar);
    jPanelBotoes.add(filler1);

    jButtonSalvar.setBackground(new java.awt.Color(242, 241, 240));
    jButtonSalvar.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
    jButtonSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ico/Save3.png"))); // NOI18N
    jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonSalvarActionPerformed(evt);
        }
    });
    jPanelBotoes.add(jButtonSalvar);

    jButtonLimpar.setBackground(new java.awt.Color(242, 241, 240));
    jButtonLimpar.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
    jButtonLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ico/limpar3.png"))); // NOI18N
    jButtonLimpar.setName(ConstantesTelas.BTN_LIMPAR);
    jButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonLimparActionPerformed(evt);
        }
    });
    jPanelBotoes.add(jButtonLimpar);

    jButtonCancelar.setBackground(new java.awt.Color(242, 241, 240));
    jButtonCancelar.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
    jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ico/Cancel3.png"))); // NOI18N
    jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonCancelarActionPerformed(evt);
        }
    });
    jPanelBotoes.add(jButtonCancelar);

    jPanelFundo.add(jPanelBotoes);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(jPanelFundo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(jPanelFundo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonLimparActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed

    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jTextFieldChaveKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldChaveKeyTyped

        String caracteres = "0987654321";
        if (!caracteres.contains(evt.getKeyChar() + "")) {
            evt.consume();
        }

        SwingUtilities.invokeLater(threadChecaCampoChave);

    }//GEN-LAST:event_jTextFieldChaveKeyTyped

    private void jCheckBoxFlgAtivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFlgAtivoActionPerformed

        if (!jCheckBoxFlgAtivo.isSelected()) {

            int opt = Mensagens.mostraMensagemPergunta("Se você desativar um armario, ele deixará de figurar nas pesquisas de Ativos. \n Tem certeza?");
            System.out.println(opt);
            if (0 == opt) {
                jCheckBoxFlgAtivo.setSelected(false);
            } else {
                jCheckBoxFlgAtivo.setSelected(true);
            };
        }

    }//GEN-LAST:event_jCheckBoxFlgAtivoActionPerformed

    private void jTextFieldChaveFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldChaveFocusLost

        if (!jTextFieldChave.getText().trim().isEmpty()) {
            configurarBotoes(true);
        }
    }//GEN-LAST:event_jTextFieldChaveFocusLost

    private void jTextFieldDescricaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDescricaoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDescricaoFocusLost

    private void jTextFieldDescricaoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDescricaoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDescricaoKeyTyped

    private void jCheckBoxFlgOcupadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxFlgOcupadoActionPerformed
        if (jCheckBoxFlgOcupado.isSelected()) {

            int opt = Mensagens.mostraMensagemPergunta("Se você cadastrar um armário como Ocupado, ele não figurará na lista dos Armarios Livres. \n Tem certeza?");
            System.out.println(opt);
            if (0 == opt) {
                jCheckBoxFlgOcupado.setSelected(true);
            } else {
                jCheckBoxFlgOcupado.setSelected(false);
            };
        }
    }//GEN-LAST:event_jCheckBoxFlgOcupadoActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(CadastrarArmarioView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(CadastrarArmarioView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(CadastrarArmarioView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(CadastrarArmarioView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new CadastrarArmarioView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private br.com.etefgarcia.armarios.model.Armario armario;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JCheckBox jCheckBoxFlgAtivo;
    private javax.swing.JCheckBox jCheckBoxFlgOcupado;
    private javax.swing.JLabel jLabelChave;
    private javax.swing.JLabel jLabelDescricao;
    private javax.swing.JLabel jLabelIdArmario;
    private javax.swing.JPanel jPanelBotoes;
    private javax.swing.JPanel jPanelEsquerdo;
    private javax.swing.JPanel jPanelFundo;
    private javax.swing.JPanel jPanelInternoDadosArmario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableTabela;
    private javax.swing.JTextField jTextFieldChave;
    private javax.swing.JTextField jTextFieldDescricao;
    private javax.swing.JTextField jTextFieldIdArmario;
    // End of variables declaration//GEN-END:variables

    private void removeListeners() {
        jButtonBuscar.removeMouseListener(cadastrarArmarioViewAction);
        jButtonCancelar.removeMouseListener(cadastrarArmarioViewAction);
        jButtonLimpar.removeMouseListener(cadastrarArmarioViewAction);
        jButtonSalvar.removeMouseListener(cadastrarArmarioViewAction);

        jTableTabela.removeMouseListener(cadastrarArmarioViewAction);

    }

    private void adicionaListeners() {

        jButtonBuscar.addMouseListener(cadastrarArmarioViewAction);
        jButtonCancelar.addMouseListener(cadastrarArmarioViewAction);
        jButtonLimpar.addMouseListener(cadastrarArmarioViewAction);
        jButtonSalvar.addMouseListener(cadastrarArmarioViewAction);

        jTableTabela.addMouseListener(cadastrarArmarioViewAction);

    }

    private void validaCampoChave() {

        if (jTextFieldChave.getText().length() > 0) {

            TelaRenderUtil.habilitarBotao(jButtonBuscar, true);

            configurarBotoes(true);

            armarioController.getThreadConsultarArmarioGeral().start();

        } else {
            mostrarTabelas(false);
            configurarBotoes(false);
            TelaRenderUtil.habilitarBotao(jButtonBuscar, false);

        }

    }

    public void limparCampos(boolean limparNome) {

        if (limparNome) {
            jTextFieldChave.setText("");
        }

        jTextFieldIdArmario.setText("");

        jTextFieldDescricao.setText("");

        configurarBotoes(false);

        jScrollPane1.setVisible(false);
        jTableTabela.setVisible(false);

        this.isAtualizar = Boolean.FALSE;
    }

    private void vincularArmario() {

        jTextFieldIdArmario.setText(armario.getIdArmario() + "");
        jTextFieldChave.setText(armario.getChave() + "");
        jTextFieldDescricao.setText(armario.getDescricao());

        jCheckBoxFlgOcupado.setSelected(armario.getFlgOcupado());
        jCheckBoxFlgAtivo.setSelected(armario.getFlgAtivo());

    }

    private void mostrarTabela(boolean mostrar) {

        if (listaArmarios != null && mostrar) {
            carregaTabela();

            jTableTabela.setVisible(mostrar);
            jTableTabela.setEnabled(mostrar);

            jScrollPane1.setEnabled(mostrar);
            jScrollPane1.setVisible(mostrar);

            habilitarSalvar(false);

        }

    }

    private void carregaTabela() {

        DefaultTableModel modelTabela = new DefaultTableModel();

        //monta os cabeçalhos das colunas da tabela
        modelTabela.addColumn("Cod");
        modelTabela.addColumn("Chave");
        modelTabela.addColumn("Descrição");
        modelTabela.addColumn("Ocupado");
        modelTabela.addColumn("Ativo");

        for (Armario c : listaArmarios) {

            //cria uma linha 'generica' com a quantidade de colunas do  modelTabela
            Object[] vetorLinhas = new Object[modelTabela.getColumnCount()];

            //preenche as colunas de cada linha do vetorLinhas para preenchar com os dados do Cliente
            vetorLinhas[0] = c.getIdArmario();
            vetorLinhas[1] = c.getChave();
            vetorLinhas[2] = c.getDescricao();
            vetorLinhas[3] = c.getFlgOcupado();
            vetorLinhas[4] = c.getFlgAtivo();

            //adiciona esta linha ao model da tabela
            modelTabela.addRow(vetorLinhas);

        }

        //coloca checkbox no flgativo
        //ajusta as barras de rolagem
        jTableTabela.setPreferredScrollableViewportSize(jTableTabela.getPreferredSize());

        //desabilita selecao de colunas na tabela
        jTableTabela.setColumnSelectionAllowed(false);

        //desabilita selecao de celulas na tabela
        jTableTabela.setCellSelectionEnabled(false);

        //habilita selecao de unica linha
        jTableTabela.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        //habilita selecao de linhas
        jTableTabela.setRowSelectionAllowed(true);

        //habilita tabela zebrada
        jTableTabela.setDefaultRenderer(Object.class, new ZebraCellRenderer());

        //finalmente adiciono o modelo ja pronto à minha tabela
        jTableTabela.setModel(modelTabela);

    }
    
    private void populaDescricao() {
         if(jTextFieldChave.getText().trim().length() >0){
         
             jTextFieldDescricao.setText("Armário " + jTextFieldChave.getText() + " ");
         
         }
        }

    public javax.swing.JComponent getPainel() {

        return this.jPanelEsquerdo;

    }

    public Armario getArmario() {

        this.armario.setDescricao(jTextFieldDescricao.getText());

        try {

            this.armario.setChave(jTextFieldChave.getText().isEmpty() ? null : Long.parseLong(jTextFieldChave.getText()));
            this.armario.setIdArmario(jTextFieldIdArmario.getText().isEmpty() ? null : Long.parseLong(jTextFieldIdArmario.getText()));

        } catch (Exception ex) {
            this.armario.setIdArmario(null);
        }

        this.armario.setFlgOcupado(jCheckBoxFlgOcupado.isSelected());
        this.armario.setFlgAtivo(jCheckBoxFlgAtivo.isSelected());

        return this.armario;

    }

    public void setArmario(Armario armario) {

        if (armario != null) {

            this.jTextFieldIdArmario.setText(armario.getIdArmario() + "");
            this.jTextFieldChave.setText(armario.getChave() + "");

            this.jTextFieldDescricao.setText(armario.getDescricao());

            this.jCheckBoxFlgOcupado.setSelected(armario.getFlgOcupado());
            this.jCheckBoxFlgAtivo.setEnabled(true);

            this.jCheckBoxFlgAtivo.setSelected(armario.getFlgAtivo());
            this.jCheckBoxFlgAtivo.setEnabled(true);

            habilitarSalvar(armario.getIdArmario() != null);

            this.isAtualizar = Boolean.TRUE;

        }

    }

    public final void mostrarTabelas(boolean mostrar) {

        mostrarTabela(mostrar);
        this.isAtualizar = mostrar;

    }

    public void setListaArmarios(List<Armario> listaArmarios) {

        this.listaArmarios = listaArmarios;

    }

    public Armario getArmarioSelecionado() {

        int linhaSelecionada = jTableTabela.getSelectedRow();

        return listaArmarios.get(linhaSelecionada);

    }

    public String getChave() {

        return this.jTextFieldChave.getText();

    }

}
